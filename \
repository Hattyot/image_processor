from matplotlib.pylot as plt
from flask.globals import request
from wand.image import Image
from io import BytesIO
import flask
import requests

flask_app = flask.Flask(__name__)


@flask_app.route("/electionimage", methods=["get"])
def election_image():
    content = request.json
    candidates = content["candidates"]
    electorate_size = content["electorate_size"]
    turnout = content["turnout"]
    include_nonvoters = content["include_nonvoters"]
    generate_table = content["generate_table"]
    parties = content["parties"]
    under_1k = []
    the_rest = []

    for candidate in candidates:
        if candidate["votes"] > 1000:
            the_rest.append(candidate)
        else:
            under_1k.append(candidate)

    nonvoters = electorate_size - turnout
    under_1k_total = sum([c["votes"] for c in under_1k])
    parent_pie_values = [c["votes"] for c in the_rest]
    parent_pie_labels = []
    for c in the_rest:
        party_name = content[c["party_id"]]
        abbr = party_name if party_name is not None else ""
        if abbr == "UK Independent Party":
            abbr = "UKIP"
        if abbr == "Scottish National Party":
            abbr = "SNP"
        parent_pie_labels.append(f"{abbr} ({c['votes']:,} votes)")

    parent_pie_values.append(under_1k_total)
    parent_pie_labels.append(f"Others ({under_1k_total:,} votes)")
    if nonvoters != 0 and include_nonvoters:
        parent_pie_values.append(nonvoters)
        parent_pie_labels.append(f"Didn't Vote ({nonvoters:,} votes)")

    # make figure and assign axis objects
    plt.tight_layout()
    fig, ax1 = plt.subplots()

    # large pie chart parameters
    # explode = [0.1, 0, 0]
    # rotate so that first wedge is split by the x-axis

    if generate_table is False:
        ax1.pie(parent_pie_values, radius=0.6, labels=parent_pie_labels)
    else:
        ax1.set_axis_off()
        rows = []

        for c in result.get_candidates():
            party_name = c["party_name"]
            if party_name == "UK Independence Party":
                party_name = "UKIP"
            if party_name == "Sccotish National Party":
                party_name = "SNP"
            rows.append(
                [
                    c["name"],
                    party_name,
                    f"{c['votes']:,}",
                    "{:.1%}".format(c["vote_share"]),
                    c["vote_share_change"],
                ]
            )

        table = ax1.table(
            cellText=rows,
            loc="upper center",
            colLabels=[
                "Candidate",
                "Party",
                "Votes",
                "Vote Share",
                "Vote Share Change",
            ],
            cellLoc="center",
        )
        table.auto_set_column_width(col=list(range(len(result.get_candidates()))))
        cells = table.get_celld()

        for i in range(5):
            for j in range(0, 13):
                cells[(j, i)].set_height(0.065)

        table.auto_set_font_size(False)
    file_id = "".join(random.choice(string.ascii_letters) for i in range(15))
    plt.savefig(f"tmpimages/{file_id}.png")
    image_file = File(f"tmpimages/{file_id}.png", filename=f"{file_id}.png")


@flask_app.route("/electionimage", methods=["get"])
def election_image():
    pass


@flask_app.route("/pride", methods=["get"])
def pride():
    img_url = flask.request.args.get("img")

    if img_url is None or img_url == "":
        return flask.jsonify({"error": "invalid image url"})

    # get file extension
    split = img_url.split(".")
    extension = split[-1]

    # check if it has arguments after extension
    split = extension.split("?")
    if len(split) > 1:
        extension = split[0]

    response = requests.get(img_url)
    _img = BytesIO(response.content)
    _img.seek(0)

    with Image() as blended_image:
        with Image(file=_img) as avatar:
            if len(avatar.sequence) > 60:
                return flask.jsonify({"error": "Gif has too many frames"})

            with Image(filename="images/pride.png") as pride_image:
                pride_image.resize(width=800, height=800)
                pride_image.transparentize(0.6)

                def apply_pride(img):
                    img.resize(width=800, height=800)
                    img.composite(pride_image)

                if len(avatar.sequence) > 1:
                    for frame in avatar.sequence:
                        apply_pride(frame)
                        blended_image.sequence.append(frame)
                else:
                    apply_pride(avatar)
                    blended_image.sequence.append(avatar)

        buffer = BytesIO()
        blended_image.save(buffer)
        buffer.seek(0)

    return flask.send_file(buffer, attachment_filename=f"pride.{extension}")


@flask_app.route("/distort", methods=["get"])
def distort():
    img_url = flask.request.args.get("img")

    if img_url is None or img_url == "":
        return flask.jsonify({"error": "invalid image url"})

    # get file extension
    split = img_url.split(".")
    extension = split[-1]

    # check if it has arguments after extension
    split = extension.split("?")
    if len(split) > 1:
        extension = split[0]

    response = requests.get(img_url)
    _img = BytesIO(response.content)
    _img.seek(0)

    with Image() as new_image:
        with Image(file=_img) as img:
            if len(img.sequence) > 60:
                return flask.jsonify({"error": "Gif has too many frames"})

            def transform_image(image):
                image.resize(width=800, height=800)
                image.liquid_rescale(
                    width=int(image.width * 0.5),
                    height=int(image.height * 0.5),
                    delta_x=1,
                )
                image.liquid_rescale(
                    width=int(image.width * 1.5),
                    height=int(image.height * 1.5),
                    delta_x=2,
                )

            if len(img.sequence) > 1:
                for frame in img.sequence:
                    transform_image(frame)
                    new_image.sequence.append(frame)
            else:
                transform_image(img)
                new_image.sequence.append(img)

        magikd_buffer = BytesIO()
        new_image.save(magikd_buffer)
        magikd_buffer.seek(0)

    return flask.send_file(magikd_buffer, attachment_filename=f"distorted.{extension}")


if __name__ == "__main__":
    flask_app.run()
